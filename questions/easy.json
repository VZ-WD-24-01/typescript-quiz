[
  {
    "question": "What is TypeScript?",
    "answers": ["A type of database", "A superset of JavaScript", "A version of Java", "A markup language"],
    "correct": 1
  },
  {
    "question": "Which keyword is used to declare a variable in TypeScript?",
    "answers": ["let", "var", "const", "All of the above"],
    "correct": 3
  },
  {
    "question": "Which file extension is used for TypeScript files?",
    "answers": [".java", ".py", ".ts", ".js"],
    "correct": 2
  },
  {
    "question": "How do you not define a string variable in TypeScript?",
    "answers": [
      "let name: string = 'John';",
      "let name = 'John';",
      "let name = 'John': string;",
      "let name: string; name = 'John';"
    ],
    "correct": 0
  },
  {
    "question": "What is the purpose of the 'as' keyword in TypeScript?",
    "answers": [
      "To rename a variable",
      "To cast a variable to a specific type",
      "To create a new variable",
      "To define a new type"
    ],
    "correct": 1
  },
  {
    "question": "How do you not define an array of numbers in TypeScript?",
    "answers": [
      "let numbers: number[] = [1, 2, 3];",
      "let numbers: [number] = [1, 2, 3];",
      "let numbers = [1, 2, 3];",
      "let numbers: Array<number> = [1, 2, 3];"
    ],
    "correct": 1
  },
  {
    "question": "What does the 'readonly' modifier do?",
    "answers": [
      "Makes a variable constant",
      "Makes a property immutable",
      "Defines a new type",
      "Creates a private property"
    ],
    "correct": 1
  },
  {
    "question": "How do you define an interface in TypeScript?",
    "answers": [
      "interface Person { name: string; age: number; }",
      "type Person { name: string; age: number; }",
      "class Person { name: string; age: number; }",
      "function Person(name: string, age: number) {}"
    ],
    "correct": 0
  },
  {
    "question": "What is the default access modifier for members of a class in TypeScript?",
    "answers": ["public", "private", "protected", "readonly"],
    "correct": 0
  },
  {
    "question": "Which of the following is used to handle asynchronous operations in TypeScript?",
    "answers": ["Promises", "Callbacks", "Async/Await", "All of the above"],
    "correct": 3
  },
  {
    "question": "How do you install TypeScript globally using npm?",
    "answers": [
      "npm install typescript",
      "npm install -g typescript",
      "npm typescript install",
      "npm install -global typescript"
    ],
    "correct": 1
  },
  {
    "question": "How do you compile a TypeScript file?",
    "answers": ["tsc filename.ts", "compile filename.ts", "ts compile filename.ts", "typescript filename.ts"],
    "correct": 0
  },
  {
    "question": "What is the command to initialize a TypeScript project?",
    "answers": ["tsc --init", "ts --init", "typescript --init", "tsinit"],
    "correct": 0
  },
  {
    "question": "How do you define a tuple in TypeScript?",
    "answers": [
      "let tuple: [number, string] = [1, 'hello'];",
      "let tuple = [1, 'hello'];",
      "let tuple: (number, string) = (1, 'hello');",
      "let tuple: {number, string} = {1, 'hello'};"
    ],
    "correct": 0
  },
  {
    "question": "What is the output type of the 'typeof' operator?",
    "answers": ["boolean", "number", "string", "object"],
    "correct": 2
  },
  {
    "question": "How do you create a union type in TypeScript?",
    "answers": [
      "let value: number|or|string;",
      "let value: number|string;",
      "let value = number|string;",
      "let value: (number|string);"
    ],
    "correct": 1
  },
  {
    "question": "How do you specify a function parameter as optional?",
    "answers": [
      "function myFunction(optional param: string) {}",
      "function myFunction(?param: string) {}",
      "function myFunction(param: string?) {}",
      "function myFunction(param?: string) {}"
    ],
    "correct": 3
  },
  {
    "question": "How do you define a function's return type in TypeScript?",
    "answers": [
      "function myFunction: string() {}",
      "function myFunction() -> string {}",
      "function myFunction(): string {}",
      "function myFunction(): {string} {}"
    ],
    "correct": 2
  },
  {
    "question": "Which of the following is a TypeScript feature that JavaScript does not have?",
    "answers": ["Array.map()", "Arrow functions", "Interfaces", "for-Loop"],
    "correct": 2
  },
  {
    "question": "How do you enforce a specific type on a function parameter?",
    "answers": [
      "function greet(name: string, age) {}",
      "function greet(name: string) {}",
      "function greet(string name) {}",
      "function greet(name: any) {}"
    ],
    "correct": 1
  }
]
